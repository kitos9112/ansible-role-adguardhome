---
- name: Setup Debian
  ansible.builtin.include_tasks: setup_debian.yml
  when: ansible_os_family == 'Debian'

- name: Setup RedHat
  ansible.builtin.include_tasks: setup_redhat.yml
  when: ansible_os_family == 'RedHat'

- name: Check if binary is installed
  ansible.builtin.stat:
    path: "{{ adguardhome_bin_file }}"
  register: adguardhome_binary_check

- name: Check latest released version
  ansible.builtin.include_tasks: latest_version.yml
  when: adguardhome_version == 'latest'

- name: Configure resolvconf.conf
  ansible.builtin.template:
    src: resolvconf.conf.j2
    dest: /etc/resolvconf.conf
    mode: 06400

- name: Check version of installed binary
  ansible.builtin.shell: >-
    set -o pipefail
    && "{{ adguardhome_bin_file }}" -c /dev/null --check-config 2>&1
    | grep -m 1 -oE 'version v([0-9.]+)' | cut -d" " -f2| cut -d" " -f2
  args:
    executable: /bin/bash
  register: adguardhome_version_check
  check_mode: false
  changed_when: >-
    adguardhome_version_check.stdout.find(adguardhome_version) == -1
  failed_when: >-
    adguardhome_version_check.rc != 0 and
    adguardhome_version_check.rc != 1 and
    adguardhome_version_check.rc != 141
  when: >-
    adguardhome_binary_check.stat.exists

- name: Ensure user exists
  ansible.builtin.user:
    name: "{{ adguardhome_user }}"
    create_home: false
    system: "{{ adguardhome_system_user }}"
    state: present

- name: "Install binary (v{{ adguardhome_version }} / {{ adguardhome_arch }})"
  include_tasks: install.yml
  when: >-
    adguardhome_version_check.changed
    or (not adguardhome_binary_check.stat.exists)

- name: Ensure various paths exist with correct permissions
  ansible.builtin.include_tasks: paths.yml

- name: Allow binary to bind to ports lower than 1024 as a non-root user
  community.general.capabilities:
    path: "{{ adguardhome_bin_file }}"
    capability: cap_net_bind_service+eip
    state: present
  when: >-
    adguardhome_user != "root"

- name: Disallow binary to bind to ports lower than 1024 as a non-root user
  community.general.capabilities:
    path: "{{ adguardhome_bin_file }}"
    capability: cap_net_bind_service+eip
    state: absent
  when: >-
    adguardhome_user == "root"

- name: Install Docker-cert.sh script for obtaining Let's Encrypt certificates
  vars:
    ansible_become: true
  ansible.builtin.include_tasks: obtain_acme_certificate.yml
  tags:
    - molecule-notest
  when: >-
    adguardhome_acme_cloudflare_certificate_enabled

- name: Install systemd service
  ansible.builtin.include_tasks: systemd_service.yml
  when: >-
    ansible_service_mgr == "systemd" and adguardhome_service_enable

- name: Disable systemd-resolved's DNSStubResolver
  ansible.builtin.include_tasks: disable_dnsstubresolver.yml
  when: >-
    adguardhome_disable_systemd_dnsstubresolver and
    ansible_facts.services
    .get("systemd-resolved.service", {})
    .get("state") == "running"
